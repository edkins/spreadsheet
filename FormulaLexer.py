# Generated from Formula.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,4,
        13,72,8,13,11,13,12,13,73,1,14,4,14,77,8,14,11,14,12,14,78,1,14,
        1,14,4,14,83,8,14,11,14,12,14,84,1,15,1,15,5,15,89,8,15,10,15,12,
        15,92,9,15,1,16,1,16,5,16,96,8,16,10,16,12,16,99,9,16,1,16,1,16,
        1,17,4,17,104,8,17,11,17,12,17,105,1,17,1,17,0,0,18,1,1,3,2,5,3,
        7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,1,0,5,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,2,0,34,34,92,92,3,0,9,10,13,13,32,32,114,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,44,1,0,0,0,5,46,1,
        0,0,0,7,48,1,0,0,0,9,51,1,0,0,0,11,54,1,0,0,0,13,56,1,0,0,0,15,58,
        1,0,0,0,17,60,1,0,0,0,19,62,1,0,0,0,21,64,1,0,0,0,23,66,1,0,0,0,
        25,68,1,0,0,0,27,71,1,0,0,0,29,76,1,0,0,0,31,86,1,0,0,0,33,93,1,
        0,0,0,35,103,1,0,0,0,37,38,5,105,0,0,38,39,5,109,0,0,39,40,5,112,
        0,0,40,41,5,111,0,0,41,42,5,114,0,0,42,43,5,116,0,0,43,2,1,0,0,0,
        44,45,5,91,0,0,45,4,1,0,0,0,46,47,5,93,0,0,47,6,1,0,0,0,48,49,5,
        45,0,0,49,50,5,62,0,0,50,8,1,0,0,0,51,52,5,58,0,0,52,53,5,58,0,0,
        53,10,1,0,0,0,54,55,5,40,0,0,55,12,1,0,0,0,56,57,5,41,0,0,57,14,
        1,0,0,0,58,59,5,44,0,0,59,16,1,0,0,0,60,61,5,58,0,0,61,18,1,0,0,
        0,62,63,5,42,0,0,63,20,1,0,0,0,64,65,5,47,0,0,65,22,1,0,0,0,66,67,
        5,43,0,0,67,24,1,0,0,0,68,69,5,45,0,0,69,26,1,0,0,0,70,72,7,0,0,
        0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,28,
        1,0,0,0,75,77,7,0,0,0,76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,
        78,79,1,0,0,0,79,80,1,0,0,0,80,82,5,46,0,0,81,83,7,0,0,0,82,81,1,
        0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,30,1,0,0,0,86,
        90,7,1,0,0,87,89,7,2,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,
        0,90,91,1,0,0,0,91,32,1,0,0,0,92,90,1,0,0,0,93,97,5,34,0,0,94,96,
        8,3,0,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,
        98,100,1,0,0,0,99,97,1,0,0,0,100,101,5,34,0,0,101,34,1,0,0,0,102,
        104,7,4,0,0,103,102,1,0,0,0,104,105,1,0,0,0,105,103,1,0,0,0,105,
        106,1,0,0,0,106,107,1,0,0,0,107,108,6,17,0,0,108,36,1,0,0,0,7,0,
        73,78,84,90,97,105,1,6,0,0
    ]

class FormulaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    MUL = 10
    DIV = 11
    ADD = 12
    SUB = 13
    UINT = 14
    UFLOAT = 15
    NAME = 16
    QUOTED = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'import'", "'['", "']'", "'->'", "'::'", "'('", "')'", "','", 
            "':'", "'*'", "'/'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "UINT", "UFLOAT", "NAME", "QUOTED", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "MUL", "DIV", "ADD", "SUB", "UINT", "UFLOAT", 
                  "NAME", "QUOTED", "WS" ]

    grammarFileName = "Formula.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


